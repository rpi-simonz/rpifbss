#!/usr/bin/env bash
#
# rpifbss - Raspberry Pi Framebuffer Slideshow    by rpi-simonz Nov. 2024

# >>>> Configuration section

SECONDS_PER_IMAGE=3
BLEND_MILLISECONDS=800

MAINTENANCE_MSG_DEFAULT="*** Maintenance running. Please be patient. ***"

# <<<< End


function print_info() {
    cat <<EOF
===============================================================================

rpifbss - Raspberry Pi Framebuffer Slideshow
--------------------------------------------

This program provides a simple framebuffer slideshow from a directory of files.
It uses software 'fbi' for that. So only still images are possible, no videos.

PDF files are displayed as well.
Even short text files (with extension .txt) are converted to images and shown.

The slideshow can be controlled interactively with fbi's key shortcuts.

  'h' lists them on the framebuffer display, see below

  'q' stops the current slideshow, and then

      * reads in possible new or modified files
      * converts unseen text files and
      * restarts the slideshow with the new contents


  keyboard commands
  ~~~~~~~~~~~~~~~~~
    cursor keys    - scroll image
    PgUp, k        - previous image
    PgDn, SPACE, j - next image
    <i>g           - jump to image #i

    a              - autozoom image
    +/-            - zoom in/out
    <i>s           - set zoom to <i>%

    ESC, q         - quit
    v              - toggle statusline
    h              - show this help text
    i              - show EXIF info
    p              - pause slideshow

  available if started with --edit switch,
  rotation works for jpeg images only:
    D, Shift+d     - delete image       *** really, without confirmation dialog! ***
    r              - rotate 90 degrees clockwise
    l              - rotate 90 degrees counter-clockwise
    x              - mirror image vertically (top / bottom)
    y              - mirror image horizontally (left to right)



Ctrl-C ends this program and therfore the slideshow completely.

To have a comfortable environment it is recommended to start this program
in a 'tmux' or 'screen' session. Then the running slideshow is always
accessible, even remotely via an SSH connection.

===============================================================================
EOF
}


function txtfiles2jpg() {
    # convert text files from current directory to jpg images
    # the image background (and more) can be configured and choosen by an optional argument

    typ="$1"
    OPTS=""
    case $typ in
        error|red)       OPTS="-background red" ;;
        warning|yellow)  OPTS="-background yellow" ;;
    esac

    for f in *.txt ; do
        img="${f}.jpg"
        if [ ! "$f" -nt "$img" ] ; then
            echo "'$img' already existing and up-to-date"
            continue
        fi
        echo "Converting '$f' to jpg."
        convert $OPTS -size 400x caption:@- "${img}" < "$f"
    done
}


function prepare_maintenance_dir() {
    # optionally create maintenance directory and default maintenance files

    mkdir -p $MAINTENANCE_DIR

    [ -f $MAINTENANCE_MSG_FILE ] || echo "$MAINTENANCE_MSG_DEFAULT" > $MAINTENANCE_MSG_FILE
    pushd $MAINTENANCE_DIR
    txtfiles2jpg red
    popd
}


function maintenance() {
    # check for files not yet converted to jpg and convert them
    # display an appropriate message during the conversion

    echo "----------------------------------------------"
    fbi -d /dev/fb0 --nointeractive --noverbose -a ${MAINTENANCE_MSG_FILE}.jpg < /dev/null &
    fbipid=$!
    txtfiles2jpg
    kill $fbipid
    echo "----------------------------------------------"
}

#=============================================================================

IMAGE_DIR=${1:-$PWD}
if [ ! -d "$IMAGE_DIR" ] ; then
    echo "Error: Provided directory '$IMAGE_DIR' not existing!?"
    exit 1
fi

cd $IMAGE_DIR || exit 1
IMAGE_DIR=${PWD}

MAINTENANCE_DIR=${IMAGE_DIR}/maintenance
MAINTENANCE_MSG_FILE=${MAINTENANCE_DIR}/maintenance.txt

MYNAME=$(basename $0)

MYVERSION=$(fbi -V | head -1 | awk '{sub(/,/,"",$3); print $3;}')
if [[ "$MYVERSION" < "2.14" ]] ; then
    echo -e "\nError: Program 'fbi' is too old! Please update to version 2.14 or newer!"
    echo -e "       Probably it needs to be compiled from source."
    echo -e "       See README.md for details.\n"
    exit 3
fi

print_info
prepare_maintenance_dir
trap exit INT

while true ; do
    maintenance
    IMAGES=$(find . -maxdepth 1 -type f ! \( -name "*.txt" -o -name "*.md" -o -name "$MYNAME" \) -print | sort)
    fbi --device /dev/fb0 --noverbose --edit --backup --autozoom --blend $BLEND_MILLISECONDS --timeout $SECONDS_PER_IMAGE  $IMAGES
done

